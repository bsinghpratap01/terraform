#### "terraform.tfstate" contains all information about infra whatever created by terraform.
### Initially it does not exist but it get created when we run "terraform apply"

# vi main.tf

provider "aws" {
  region = "us-east-2"
}

resource "aws_instance" "web" {
  ami           = "ami-0597375488017747e" 
  instance_type = "t2.micro"

  tags = {
    Name = "web-box"
  }
}

resource "aws_instance" "db" {
  ami           = "ami-0597375488017747e" 
  instance_type = "t2.medium"

  tags = {
    Name = "db-box"
  }
}

resource "aws_ebs_volume" "storage" {
  availability_zone = "ap-south-1b"
  size              = 40

  tags = {
    Name = "vol-storage"
  }
}

### If we make any change in existing infra then terraform keeps previous info in "terraform.tfstate.backup" and create a new "terraform.tfstate" file with changed in ### infra
### To verify make any change in resource definition such as "tag" or "instance_type" and run "terraform apply"

# Let's take an example there are three team members who are managing the infra using terraform and they are putting "terraform.tfstate" file in their own laptops. In # this case they have to get latest "terraform.tfstate" file from one another.

# Instead of using version control, the best way to manage shared storage for state files is to use Terraformâ€™s built-in support for remote backends. A number of      # remote backends are supported, including Amazon S3, Azure Storage, Google Cloud Storage etc.

# Remote state file storage - S3 bucket example

# Task 1 - Create s3 bucket

provider "aws" {
  region = "ap-south-1"
}

resource "aws_s3_bucket" "terraform-state" {
   bucket = "bhanu-3333-terraform"
   # prevent accidental deletion of s3 bucket
   lifecycle {
     prevent_destroy = true
   }
   # enable versioning to see full revision history of your state files.
   versioning {
     enabled = true
   }
   # enable server-side encryption (SSE)
   server_side_encryption_configuration {
     rule {
	   apply_server_side_encryption_by_default {
	      sse_algorithm = "AES256"
	   }
	 }
   }   
}

# Task 2 - Create DynamoDB table

resource "aws_dynamodb_table" "terraform_locks" {
   hash_key = "LockID"
   name = "terraform-test-locks"
   billing_mode = "PAY_PER_REQUEST"
   attribute {
     name = "LockID"
	 type = "S"
   }
}





