# Provisioner type - local-exec, remote-exec, file provisioner
# File provioner only accepts "/tmp" as destination, for other destination location use combination file + remote-exec provisioners.
# 'local-exec' runs on the system where we run terraform commands, 'remote-exec' runs on remote system, and in 'file' provisioner we define source and destination.
# remote and file provisioners need 'connection' to be defined on windows systems "WINRM" and on linux systems "SSH"

# Vendor provisioners - CHEF, PUPPET, HABITAT, SALTSTACK

# Case 1 - Example - provisioning a web server.

### vi main.tf

provider "aws" {
   region = "ap-south-1"
}

resource "aws_instance" "prod-team" {
  ami           = "ami-0597375488017747e"
  instance_type = "t2.micro"
  key_name = "aws_key"
  vpc_security_group_ids = [aws_security_group.main.id]

  tags = {
    Name = "prod"
  }

provisioner "file" {
  source = "/root/bhanu/index.html"
  destination = "/tmp/index.html"
  }

provisioner "remote-exec" {
  inline = [
   "sudo yum install -y httpd"
   "sudo yum start httpd",
   "sudo systemctl enable httpd",
   "cp /tmp/index.html /var/www/html",
   "sudo systemctl restart httpd"
  ]
  }  
connection {
  host = self.public_ip
  user = "ec2-user"
  type = "ssh"
  private_key = file("./deployer")
}

}

resource "aws_key_pair" "deployer" {
  key_name   = "aws_key"
  public_key = "<your public key>"
}

resource "aws_security_group" "main" {
  egress = [
    {
      cidr_blocks      = [ "0.0.0.0/0", ]
      description      = ""
      from_port        = 0
      ipv6_cidr_blocks = []
      prefix_list_ids  = []
      protocol         = "-1"
      security_groups  = []
      self             = false
      to_port          = 0
    }
  ]
 ingress               = [
   {
     cidr_blocks      = [ "0.0.0.0/0", ]
     description      = ""
     from_port        = 22
     ipv6_cidr_blocks = []
     prefix_list_ids  = []
     protocol         = "tcp"
     security_groups  = []
     self             = false
     to_port          = 22
  }
  ]
}

# Case 2 - Example of full website

provider "aws" {
   region = "ap-south-1"
}

resource "aws_instance" "prod-team" {
  ami           = "ami-0e742cca61fb65051"
  instance_type = "t2.micro"
  key_name = "aws_key"
  vpc_security_group_ids = [aws_security_group.main.id]

  tags = {
    Name = "prod"
  }

provisioner "file" {
  source = "/home/myweb/website"
  destination = "/tmp"
  }

provisioner "remote-exec" {
  inline = [
   "sudo yum install -y httpd",
   "sudo yum start httpd",
   "sudo systemctl enable httpd",
   "sudo cp -rvf /tmp/website/* /var/www/html",
   "sudo systemctl restart httpd"
  ]
  }
connection {
  host = self.public_ip
  user = "ec2-user"
  type = "ssh"
  private_key = file("/myuser/.ssh/id_rsa")
}
}

resource "aws_key_pair" "deployer" {
  key_name   = "aws_key"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCvb//HB8ATxJ+CQ4+MiKB6JiapecbuQn9bsCLVefIitXPC9RBUbvxoa6vwc7ttlYdz2FQ5S+/qq584JIs04zIXGBo2r8MXukI8UrAPuLbLdZAjcBkS/0MLrQI9J8e1/cajHd/8WH81X1czIXS5FNLetbWzQe23FS++HUQ+ga9+1cXCjo4UMawvByY2ph6H0UPrvkknj/DmxnhUbe/5SRwVBcqGd0zz8F8xIfh25yH5nbEZFLAcY9RZpjSw1TXWsgEXj6P4Bl2plXQ36bCCKt/LPfLa65qZ89v1U+3+z8b7gyrGJ9p4LTB4DmgarGVmo4S8dGJ6cQn3QdNINlZQyfJHhdCUl6BolDQ8GunBNQKzoZ3GjmqhzbxLkfHPvY2AKeDRF8MkMvOSq8w7j1dIIE9FNlJrzeRcLVV9dAQ3cGqJeKqXJcNMUz31YdWHlDi91A2ksnkdURQg6+R+uWl6JufmQqC8klOqeGaomSCQEN3sv5wl/qVeQShft1BYs5glfvc= mykey@worker"
}

resource "aws_security_group" "main" {
  egress = [
    {
      cidr_blocks      = [ "0.0.0.0/0", ]
      description      = ""
      from_port        = 0
      ipv6_cidr_blocks = []
      prefix_list_ids  = []
      protocol         = "-1"
      security_groups  = []
      self             = false
      to_port          = 0
    }
  ]
 ingress               = [
   {
     cidr_blocks      = [ "0.0.0.0/0", ]
     description      = ""
     from_port        = 22
     ipv6_cidr_blocks = []
     prefix_list_ids  = []
     protocol         = "tcp"
     security_groups  = []
     self             = false
     to_port          = 80
  }
  ]
}

# Case 3 - Example of "local-exec"

### vi main.tf

provider "aws" {
   region = "ap-south-1"
}

resource "aws_instance" "prod-team" {
  ami           = "ami-0597375488017747e"
  instance_type = "t2.micro"
  key_name = "aws_key"
  vpc_security_group_ids = [aws_security_group.main.id]

  tags = {
    Name = "prod"
  }

provisioner "local-exec" {
  command = "echo ${aws_instance.prod-team.public_ip} >> /tmp/public_ip.txt"
}
}

output "prod-team_ip" {
  value = aws_instance.prod-team.public_ip
}

resource "aws_key_pair" "deployer" {
  key_name   = "aws_key"
  public_key = "<your public key>"
}

resource "aws_security_group" "main" {
  egress = [
    {
      cidr_blocks      = [ "0.0.0.0/0", ]
      description      = ""
      from_port        = 0
      ipv6_cidr_blocks = []
      prefix_list_ids  = []
      protocol         = "-1"
      security_groups  = []
      self             = false
      to_port          = 0
    }
  ]
 ingress               = [
   {
     cidr_blocks      = [ "0.0.0.0/0", ]
     description      = ""
     from_port        = 22
     ipv6_cidr_blocks = []
     prefix_list_ids  = []
     protocol         = "tcp"
     security_groups  = []
     self             = false
     to_port          = 22
  }
  ]
}

# 'local-exec' Running an ansible playbook

provider "aws" {
   region = "ap-south-1"
}

variable "privatekey" {
  default = "developer"
}

resource "aws_instance" "web" {
  ami           = "ami-0e742cca61fb65051"
  instance_type = "t2.micro"
  key_name = "aws_key"
  vpc_security_group_ids = [aws_security_group.main.id]

  tags = {
    Name = "prod"
  }

provisioner "local-exec" {
  command = "ansible-playbook -i ${aws_instance.web.public_ip}, --private-key ${var.privatekey} play.yaml"
}
}

resource "aws_key_pair" "developer" {
  key_name   = "aws_key"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDSA3E3o18aT642PA3eUlkK5ZOk4/3ScPKk0Ft1L6E7B+I+hpqRVayN560tWukM3iiQKSnBfZZYqyYDIZWBYrbFfAGs/EBdEt9Nq8MTtZYWe6fehgrlmUnsaq8CSn3KKet6rHyJHsfsxD3Vw8uR4IiXoxV5To5++T+/sI9d9leXihjPPcgZ23+Myh43doy/7UzDIWW11D/zQVOFaqS3O49yufr0PffHODysNsd3Y1+82Cc35baJSBlxEl+lXfiuhdLwxwzvQAkiwuz+vUWsxC9nckq+JgH52WraYc6CyawHfcPb17EfZp0Jw6aES80upTpMoj+ShqqJv/V4/PXp3D2Y9wHP78JxWID0YQ/+aRHCqxkKk8PTne4eycp4CLiwhifbIbWZSyN5ul7tOiNuSoeRKwEUXL6wXyZ0rFmFlb7lMEaUrlLlquM/wP/M81x7LUMXgXVE6lesppnE8WpYYthiwj9JY/klg0snzfHJTc+3Fl6ifcj0GTODGthpq56FM+k= root@worker2"
}

resource "aws_security_group" "main" {
  egress = [
    {
      cidr_blocks      = [ "0.0.0.0/0", ]
      description      = ""
      from_port        = 0
      ipv6_cidr_blocks = []
      prefix_list_ids  = []
      protocol         = "-1"
      security_groups  = []
      self             = false
      to_port          = 0
    }
  ]
 ingress               = [
   {
     cidr_blocks      = [ "0.0.0.0/0", ]
     description      = ""
     from_port        = 22
     ipv6_cidr_blocks = []
     prefix_list_ids  = []
     protocol         = "tcp"
     security_groups  = []
     self             = false
     to_port          = 80
  }
  ]
}

## Run this code, you will get an error. To resolve this error we have to use 'remote-exec' and 'connection' block before running ansible playbook using 
## 'local-exec'
## Below code works fine.

provider "aws" {
   region = "ap-south-1"
}

variable "privatekey" {
  default = "developer"
}

resource "aws_instance" "web" {
  ami           = "ami-0e742cca61fb65051"
  instance_type = "t2.micro"
  key_name = "aws_key"
  vpc_security_group_ids = [aws_security_group.main.id]

  tags = {
    Name = "prod"
  }

provisioner "remote-exec" {
  inline = [
      "echo 'build ssh connection' "
    ]
connection {
  host = self.public_ip
  user = "ec2-user"
  type = "ssh"
  private_key = file("./developer")
}
}
provisioner "local-exec" {
  command = "ansible-playbook -i ${aws_instance.web.public_ip}, --private-key ${var.privatekey} play.yaml"
}
}

resource "aws_key_pair" "developer" {
  key_name   = "aws_key"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDSA3E3o18aT642PA3eUlkK5ZOk4/3ScPKk0Ft1L6E7B+I+hpqRVayN560tWukM3iiQKSnBfZZYqyYDIZWBYrbFfAGs/EBdEt9Nq8MTtZYWe6fehgrlmUnsaq8CSn3KKet6rHyJHsfsxD3Vw8uR4IiXoxV5To5++T+/sI9d9leXihjPPcgZ23+Myh43doy/7UzDIWW11D/zQVOFaqS3O49yufr0PffHODysNsd3Y1+82Cc35baJSBlxEl+lXfiuhdLwxwzvQAkiwuz+vUWsxC9nckq+JgH52WraYc6CyawHfcPb17EfZp0Jw6aES80upTpMoj+ShqqJv/V4/PXp3D2Y9wHP78JxWID0YQ/+aRHCqxkKk8PTne4eycp4CLiwhifbIbWZSyN5ul7tOiNuSoeRKwEUXL6wXyZ0rFmFlb7lMEaUrlLlquM/wP/M81x7LUMXgXVE6lesppnE8WpYYthiwj9JY/klg0snzfHJTc+3Fl6ifcj0GTODGthpq56FM+k= root@worker2"
}

resource "aws_security_group" "main" {
  egress = [
    {
      cidr_blocks      = [ "0.0.0.0/0", ]
      description      = ""
      from_port        = 0
      ipv6_cidr_blocks = []
      prefix_list_ids  = []
      protocol         = "-1"
      security_groups  = []
      self             = false
      to_port          = 0
    }
  ]
 ingress               = [
   {
     cidr_blocks      = [ "0.0.0.0/0", ]
     description      = ""
     from_port        = 22
     ipv6_cidr_blocks = []
     prefix_list_ids  = []
     protocol         = "tcp"
     security_groups  = []
     self             = false
     to_port          = 80
  }
  ]
}


# "local-exec" example from Internet

resource "aws_instance" "web" {
  ami                    = data.aws_ami.ubuntu.id
  instance_type          = var.instance_type
  key_name               = aws_key_pair.key-tf.key_name
  vpc_security_group_ids = ["${aws_security_group.allow_tls.id}"]
  tags = {
    Name = "first-tf-instance"
  }
  user_data = file("${path.module}/script.sh")
  connection {
    type        = "ssh"
    user        = "ubuntu"
    private_key = file("${path.module}/id_rsa")
    host        = self.public_ip
  }
  provisioner "local-exec" {
    command = "echo testing > /tmp/test.txt"
  }
  provisioner "local-exec" {
    working_dir = "/tmp"
    command = "echo ${self.public_ip}>myip.txt"
  }
  provisioner "local-exec" {
    interpreter = [
      "/usr/bin/python3", "-c"
    ]
    command = "print('HelloWorld')"
  }
  provisioner "local-exec" {
    command = "env>env.txt"
    environment = {
      envname = "envvalue"
    }
  }
}


