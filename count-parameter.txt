# The count argument replicates the given resource or module a specific number of times with an incrementing counter. It works best when resources will be identical, or # nearly so.

### vi main.tf

provider "aws" {
   region = "ap-south-1"
}

resource "aws_instance" "prod-team" {
  ami           = "ami-0597375488017747e"
  instance_type = "t2.micro"
  count = 3

  tags = {
    Name = "dev-team"
  }
}

### There are actually five meta-arguments that can be used within resource blocks at the time of writing:
- depends_on
- count
- for_each
- provider
- lifecycle

### Meta-arguments can also be used within modules, which differ slightly from the resource meta-arguments:
- depends_on
- count
- for_each
- providers
Note count, for_each, depends_on are the same between resource blocks and modules, lifecycle is omitted and provider becomes providers


# count parameter "count.index" varibale

# vi main.tf

provider "aws" {
   region = "ap-south-1"
}

resource "aws_instance" "prod-team" {
  ami           = "ami-0597375488017747e"
  instance_type = "t2.micro"
  count = 3

  tags = {
    Name = "dev.${count.index}"
  }
}

### count parameter with list type variable

# vi main.tf

provider "aws" {
   region = "ap-south-1"
}

variable "instancetag" {
   type = list
   default = ["test-dep","prod-dep","dev-dep"]
}

resource "aws_instance" "prod-team" {
  ami           = "ami-0597375488017747e"
  instance_type = "t2.micro"
  count = 3

  tags = {
    Name = var.instancetag[count.index]
  }
}

# count variable changing instance type

# vi main.tf

provider "aws" {
   region = "ap-south-1"
}

variable "instancetag" {
   type = list
   default = ["test-dep","prod-dep","dev-dep"]
}

variable "instancetype" {
   type = list
   default = ["t2.micro","t2.small","t2.medium"]
}
resource "aws_instance" "prod-team" {
  ami           = "ami-0597375488017747e"
  instance_type = var.instancetype[count.index]
  count = 3

  tags = {
    Name = var.instancetag[count.index]
  }
}
