#### "terraform.tfstate" contains all information about infra whatever created by terraform.
### Initially it does not exist but it get created when we run "terraform apply"

# vi main.tf

provider "aws" {
  region = "ap-south-1"
}

resource "aws_instance" "web" {
  ami           = "ami-0597375488017747e" 
  instance_type = "t2.micro"

  tags = {
    Name = "web-box"
  }
}

resource "aws_instance" "db" {
  ami           = "ami-0597375488017747e" 
  instance_type = "t2.medium"

  tags = {
    Name = "db-box"
  }
}

resource "aws_ebs_volume" "storage" {
  availability_zone = "ap-south-1b"
  size              = 40

  tags = {
    Name = "vol-storage"
  }
}

### If we make any change in existing infra then terraform keeps previous info in "terraform.tfstate.backup" and create a new "terraform.tfstate" file with changed in ### infra
### To verify make any change in resource definition such as "tag" or "instance_type" and run "terraform apply"

# Let's take an example there are three team members who are managing the infra using terraform and they are putting "terraform.tfstate" file in their own laptops. In # this case they have to get latest "terraform.tfstate" file from one another.

# Instead of using version control, the best way to manage shared storage for state files is to use Terraform’s built-in support for remote backends. A number of      # remote backends are supported, including Amazon S3, Azure Storage, Google Cloud Storage etc.

# Remote state file storage - S3 bucket example
### Reference - https://gauravguptacloud.medium.com/terraform-state-shared-storage-for-state-files-how-to-manage-7912907436b7
# Task 1 - Create s3 bucket

provider "aws" {
  region = "ap-south-1"
}

resource "aws_s3_bucket" "terraform-state" {
   bucket = "bhanu-3333-terraform"
   # prevent accidental deletion of s3 bucket
   lifecycle {
     prevent_destroy = true
   }
   # enable versioning to see full revision history of your state files.
   versioning {
     enabled = true
   }
   # enable server-side encryption (SSE)
   server_side_encryption_configuration {
     rule {
	   apply_server_side_encryption_by_default {
	      sse_algorithm = "AES256"
	   }
	 }
   }   
}

# Task 2 - Create DynamoDB table

resource "aws_dynamodb_table" "terraform_locks" {
   hash_key = "LockID"
   name = "terraform-test-locks"
   billing_mode = "PAY_PER_REQUEST"
   attribute {
     name = "LockID"
	 type = "S"
   }
}

# Task 3 - Backend configuration

terraform {
  backend "s3" {
    # your bucket name
	bucket = "bhanu-3333-terraform"
	key = "bhanu-3333-terraform/projects/terraform.tfstate"
	region = "ap-south-1"
	# DynamoDB table name
	dynamodb_table = "terraform-test-locks"
	encrypt = true
  }
}

## You will get below "state file locking" message, when multiple users trying to make changes the same time. 

root@worker2:~/test07# terraform apply
Acquiring state lock. This may take a few moments...
╷
│ Error: Error acquiring the state lock
│
│ Error message: ConditionalCheckFailedException: The conditional
│ request failed
│ Lock Info:
│   ID:        f4938799-5dc7-d5c5-f0ba-9d5a26b5a46e
│   Path:      bhanu-3333-terraform/bhanu-3333-terraform/project/terraform.tfstate
│   Operation: OperationTypeApply
│   Who:       root@worker2
│   Version:   1.3.6
│   Created:   2023-02-06 14:01:47.522972784 +0000 UTC
│   Info:
│
│
│ Terraform acquires a state lock to protect the state from being
│ written
│ by multiple users at the same time. Please resolve the issue
│ above and try
│ again. For most commands, you can disable locking with the
│ "-lock=false"
│ flag, but this is not recommended.
╵
root@worker2:~/test07#


### Reference
https://developer.hashicorp.com/terraform/tutorials/state/state-cli
https://developer.hashicorp.com/terraform/tutorials/state/cloud-migrate

